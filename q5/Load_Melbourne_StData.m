%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                       Import two datasets                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Import edgelist (you can use the built-in function to import data)
% Only the first two columns may be enough as they are the indices of two ends for a link.

% The following is the auto-generated script.

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 46);

% Specify range and delimiter
opts.DataLines = [1, Inf];
opts.Delimiter = " ";

% Specify column names and types
opts.VariableNames = ["idx1", "idx2", "Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37", "Var38", "Var39", "Var40", "Var41", "Var42", "Var43", "Var44", "Var45", "Var46"];
opts.SelectedVariableNames = ["idx1", "idx2"];
opts.VariableTypes = ["int64", "int64", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char", "char"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";
opts.LeadingDelimitersRule = "ignore";

% Specify variable properties
opts = setvaropts(opts, ["Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37", "Var38", "Var39", "Var40", "Var41", "Var42", "Var43", "Var44", "Var45", "Var46"], "WhitespaceRule", "preserve");
opts = setvaropts(opts, ["Var3", "Var4", "Var5", "Var6", "Var7", "Var8", "Var9", "Var10", "Var11", "Var12", "Var13", "Var14", "Var15", "Var16", "Var17", "Var18", "Var19", "Var20", "Var21", "Var22", "Var23", "Var24", "Var25", "Var26", "Var27", "Var28", "Var29", "Var30", "Var31", "Var32", "Var33", "Var34", "Var35", "Var36", "Var37", "Var38", "Var39", "Var40", "Var41", "Var42", "Var43", "Var44", "Var45", "Var46"], "EmptyFieldRule", "auto");
opts = setvaropts(opts, ["idx1", "idx2"], "ThousandsSeparator", ",");

% Import the data
Melbourne_Edgelist = readtable(".\Melbourne_Edgelist.txt", opts);

%% Clear temporary variables
clear opts

%% Import Node Table 
% Auto-generated by MATLAB on 26-Sep-2024 18:11:12

%% Set up the Import Options and import the data
opts = delimitedTextImportOptions("NumVariables", 6);

% Specify range and delimiter
opts.DataLines = [2, Inf];
opts.Delimiter = ",";

% Specify column names and types
opts.VariableNames = ["idx", "Lat", "Long", "street_count", "highway", "ref"];
opts.VariableTypes = ["int64", "double", "double", "double", "char", "double"];

% Specify file level properties
opts.ExtraColumnsRule = "ignore";
opts.EmptyLineRule = "read";

% Specify variable properties
opts = setvaropts(opts, "highway", "WhitespaceRule", "preserve");
opts = setvaropts(opts, "highway", "EmptyFieldRule", "auto");

% Import the data
Melbourne_Node = readtable(".\Melbourne_Node.csv", opts);


%% Clear temporary variables
clear opts


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                         Create Networks                           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Melbourne_Node.idInMatrix = [1:size(Melbourne_Node,1)]';

% the Adjacency Matrix 
A = sparse(size(Melbourne_Node,1),size(Melbourne_Node,1));

% Take for a while, maybe better in the vector form.
for i = 1:size(Melbourne_Edgelist,1)
    temp_idx1 = Melbourne_Edgelist.idx1(i);
    temp_idx2 = Melbourne_Edgelist.idx2(i);

    temp_idInMatrix1 = Melbourne_Node.idInMatrix(find(Melbourne_Node.idx == temp_idx1));
    temp_idInMatrix2 = Melbourne_Node.idInMatrix(find(Melbourne_Node.idx == temp_idx2));

    A(temp_idInMatrix1,temp_idInMatrix2) = 1;
    A(temp_idInMatrix2,temp_idInMatrix1) = 1;

end

clear temp_idInMatrix1 temp_idInMatrix2 temp_idx1 temp_idx2 i

%% 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                         Clean Networks                            %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% creating new Edgelist data with matrix ids rather than node ids
for i = 1:height(Melbourne_Edgelist)
    % source node
    s = Melbourne_Edgelist.idx1(i);
    s_idx = find(Melbourne_Node.idx == s);
    s_new = Melbourne_Node.idInMatrix(s_idx);
    Melbourne_Edgelist.idx1(i) = s_new;
    % source node
    t = Melbourne_Edgelist.idx2(i);
    t_idx = find(Melbourne_Node.idx == t);
    t_new = Melbourne_Node.idInMatrix(t_idx);
    Melbourne_Edgelist.idx2(i) = t_new;
end


%% 
% we want to get rid of excess nodes so our graph isn't as big
% thats all nodes designated as traffic lights and crossings (anything not
% a highway node)
% and remember to fill in the edges
% highway_ex = zeros(height(Melbourne_Node),1);
% for i = 1:height(Melbourne_Node)
%     if strcmp(Melbourne_Node.highway{i}, '')
%         highway_ex(i) = 1;
% 
%     else
%         highway_ex(i) = 0;
%     end
% end
% 
% clean_nodes_idx = find(highway_ex == 1);
% 
% clean_nodes = Melbourne_Node(clean_nodes_idx,:);

% clean all edges with extracted nodes 